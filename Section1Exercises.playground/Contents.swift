import UIKit

// EXERCISES GENERATED BY CHATGPT TO SOLIDIFY CONCEPTS LEARNED IN SECTION 1, CHAPTERS 1 - 6


// 1. Learning Tracker
// Create variables for:
// - Day (8)
// - Chapter (String)
// - hoursStudied (Double)
// - completedChallenges (Bool)
// - Print a formatted message like:
//      Day 6: Finished Chapter 5 - studied 2.5 hours

var day: Int = 8
var chapter: String = "Chapter 6"
var hoursStudied: Double = 4.0
var completedChallenges: Bool = true

var status: Character = completedChallenges ? "✅" : "❌"

print("\(status) Day \(day): Finished \(chapter) - studied for \(hoursStudied)")


/* 2. FizzBuzz with a twist
    Write a function fizzBuzz(upTo n: Int) that:
    - Prints "Fizz" if a number is divisible by 3
    - Prints "Buzz" if a number is divisible by 5
    - Prinst "FizzBuzz" if divisible by both 3 and 5
    - Otherwise prints the number itself
 */
func fizzBuzz(upTo n: Int) {
    for number in 1...n {
        switch number {
            case _ where number % 3 == 0 && number % 5 == 0:
            print("FizzBuzz")
            case _ where number % 3 == 0:
            print("Fizz")
            case _ where number % 5 == 0:
            print("Buzz")
        default:
            print(number)
        }
    }
}
fizzBuzz(upTo: 20)

/* 3. Safe division
    Write a function that divides two integers but safely handles division by zero
 
    func divide(_ a: Int, by b: Int) -> Int? {
        // Your code here
    }
    
    Requirements
    1. If b == 0, return nil.
    2. Otherwise, return the result of a / b.
    3. Call the function with (10, 2) and (10, 0).
    4. Use optional binding (if let) to safely unwrap and print results.
 */

func divide(_ a: Int, by b: Int) -> Int? {
    if b == 0 {
        return nil
    } else {
        return a / b
    }
}

if let test1 = divide(10, by: 2) {
    print("10 / 2 = \(test1)")
} else {
    print("Can't divide by zero!")
}

if let test2 = divide(10, by: 0) {
    print("10 / 0 = \(test2)")
} else {
    print("Can't divide by zero!")
}


/* 4. Write a function grade(for score: Int) -> String that returns a letter grade based on the score:
 "A" for 90–100
 "B" for 80–89
 "C" for 70–79
 "D" for 60–69
 "F" for below 60
 */
func grade(for score: Int) -> String {
    switch score {
    case 90...100:
        return "A"
    case 80..<90:
        return "B"
    case 70..<80:
        return "C"
    case 60..<70:
        return "D"
    case 0..<60:
        return "F"
    default:
        return "Invalid score."
    }
}

print(grade(for: 95))
print(grade(for: 82))
print(grade(for: 70))
print(grade(for: 65))
print(grade(for: 50))

/* 5. Write a function printEven(_ n: Int?) that:
    - Uses guard let to unwrap the optional.
    - If n is nil, print "No number provided".
    - If the number is even, print "Even: n".
    - If the number is odd, print "Odd: n".
 */

func printEven(_ n: Int?) {
    guard let n else {
        print("No number provided")
        return
    }
    
    if n % 2 == 0 {
        print("Even: \(n)")
    } else {
        print("Odd: \(n)")
    }
}

printEven(nil)
printEven(0)
printEven(2)
printEven(3)
